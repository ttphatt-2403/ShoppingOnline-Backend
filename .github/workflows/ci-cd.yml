# 🚀 CI/CD Pipeline for Shopping Online Backend
# Tự động build, test và deploy khi có commit mới

name: 'Shopping Online Backend CI/CD'

# Khi nào pipeline sẽ chạy
on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

# Variables môi trường
env:
  DOTNET_VERSION: '8.0.x'
  PROJECT_PATH: './ShoppingOnline.API'
  ARTIFACT_NAME: 'shopping-online-api'

# Jobs pipeline
jobs:
  # Job 1: Build và Test
  build-and-test:
    name: '🏗️ Build & Test'
    runs-on: ubuntu-latest
    
    steps:
    # Bước 1: Checkout source code
    - name: '📥 Checkout Code'
      uses: actions/checkout@v4
      
    # Bước 2: Setup .NET SDK
    - name: '⚙️ Setup .NET ${{ env.DOTNET_VERSION }}'
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    # Bước 3: Cache dependencies để build nhanh hơn
    - name: '📦 Cache NuGet packages'
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    # Bước 4: Restore dependencies
    - name: '📦 Restore Dependencies'
      run: |
        cd ${{ env.PROJECT_PATH }}
        dotnet restore
        
    # Bước 5: Build project
    - name: '🏗️ Build Project'
      run: |
        cd ${{ env.PROJECT_PATH }}
        dotnet build --configuration Release --no-restore
        
    # Bước 6: Run tests (nếu có)
    - name: '🧪 Run Tests'
      run: |
        cd ${{ env.PROJECT_PATH }}
        # Kiểm tra có test project không
        if find . -name "*.Tests.csproj" -o -name "*Test*.csproj" | grep -q .; then
          dotnet test --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage"
        else
          echo "No test projects found. Skipping tests."
        fi
        
    # Bước 7: Code Coverage (nếu có tests)
    - name: '📊 Upload Coverage Reports'
      if: success()
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false
        
    # Bước 8: Security Scan
    - name: '🔒 Security Vulnerability Scan'
      run: |
        cd ${{ env.PROJECT_PATH }}
        dotnet list package --vulnerable --include-transitive || true
        
    # Bước 9: Publish artifacts
    - name: '📦 Publish Application'
      run: |
        cd ${{ env.PROJECT_PATH }}
        dotnet publish --configuration Release --output ./publish --no-build
        
    # Bước 10: Upload build artifacts
    - name: '⬆️ Upload Build Artifacts'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: ${{ env.PROJECT_PATH }}/publish/
        retention-days: 30

  # Job 2: Docker Build (chạy sau khi build thành công)
  docker-build:
    name: '🐳 Docker Build'
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    # Bước 1: Checkout code
    - name: '📥 Checkout Code'
      uses: actions/checkout@v4
      
    # Bước 2: Setup Docker Buildx
    - name: '🐳 Set up Docker Buildx'
      uses: docker/setup-buildx-action@v3
      
    # Bước 3: Login to Docker Hub (dùng secrets)
    - name: '🔐 Login to Docker Hub'
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ttphatt2403
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    # Bước 4: Build Docker image
    - name: '🏗️ Build Docker Image'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64
        push: false
        tags: |
          shopping-online-api:latest
          shopping-online-api:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job 3: Deploy to Staging (chỉ khi push vào main/master)
  deploy-staging:
    name: '🚀 Deploy to Staging'
    runs-on: ubuntu-latest
    needs: [build-and-test, docker-build]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: staging
    
    steps:
    # Bước 1: Download artifacts
    - name: '📥 Download Build Artifacts'
      uses: actions/download-artifact@v3
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: ./artifacts
        
    # Bước 2: Deploy notification
    - name: '📢 Deploy Notification'
      run: |
        echo "🚀 Deploying Shopping Online API to Staging..."
        echo "📦 Artifact size: $(du -sh ./artifacts | cut -f1)"
        echo "🔗 Commit: ${{ github.sha }}"
        echo "👤 Author: ${{ github.actor }}"
        
    # Bước 3: Simulate deployment (thay bằng actual deployment commands)
    - name: '🎯 Deploy Application'
      run: |
        echo "Deploying to staging environment..."
        echo "Application deployed successfully!"
        echo "🌐 Staging URL: https://staging-shopping-api.yourdomain.com"

  # Job 4: Production Deployment (manual approval required)
  deploy-production:
    name: '🏆 Deploy to Production'
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: production
    
    steps:
    # Bước 1: Production deployment
    - name: '🏆 Deploy to Production'
      run: |
        echo "🚀 Deploying to Production Environment..."
        echo "✅ Production deployment completed!"
        echo "🌐 Production URL: https://api.yourdomain.com"

# Notification job (chạy cuối cùng)
  notify:
    name: '📢 Notifications'
    runs-on: ubuntu-latest
    needs: [build-and-test, docker-build]
    if: always()
    
    steps:
    - name: '📢 Pipeline Status Notification'
      run: |
        if [ "${{ needs.build-and-test.result }}" == "success" ]; then
          echo "✅ Build & Test: SUCCESS"
        else
          echo "❌ Build & Test: FAILED"
        fi
        
        if [ "${{ needs.docker-build.result }}" == "success" ]; then
          echo "✅ Docker Build: SUCCESS"
        else
          echo "⚠️ Docker Build: SKIPPED/FAILED"
        fi
        
        echo "📊 Pipeline completed for commit: ${{ github.sha }}"
        echo "👤 Triggered by: ${{ github.actor }}"
        echo "🔗 Repository: ${{ github.repository }}"
