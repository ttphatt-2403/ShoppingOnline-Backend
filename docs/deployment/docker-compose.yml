# docker-compose.yml - Single port cho toàn bộ application
version: '3.8'

services:
  # Database
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    environment:
      SA_PASSWORD: "YourPassword123!"
      ACCEPT_EULA: "Y"
    ports:
      - "1433:1433"
    volumes:
      - sqlserver_data:/var/opt/mssql

  # Backend API
  api:
    build: 
      context: ./ShoppingOnline.API
      dockerfile: Dockerfile
    environment:
      - ConnectionStrings__DefaultConnection=Server=sqlserver;Database=ShoppingDB;User Id=sa;Password=YourPassword123!;TrustServerCertificate=True;
    depends_on:
      - sqlserver
    # Internal port - không expose ra ngoài

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    # Internal port - không expose ra ngoài

  # Reverse Proxy - SINGLE ENTRY POINT
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"      # CHỈ MỘT PORT DUY NHẤT!
      - "443:443"    # HTTPS nếu cần
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - api
      - frontend

volumes:
  sqlserver_data:

# ==================== DOCKERFILE CHO FRONTEND ====================
# frontend/Dockerfile
FROM node:18-alpine AS builder

WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production

COPY . .
RUN npm run build

FROM nginx:alpine
COPY --from=builder /app/build /usr/share/nginx/html
COPY nginx.conf /etc/nginx/nginx.conf
EXPOSE 80

# ==================== DOCKERFILE CHO BACKEND ====================
# ShoppingOnline.API/Dockerfile
FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS base
WORKDIR /app
EXPOSE 80

FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
WORKDIR /src
COPY ["ShoppingOnline.API.csproj", "./"]
RUN dotnet restore
COPY . .
RUN dotnet build -c Release -o /app/build

FROM build AS publish
RUN dotnet publish -c Release -o /app/publish

FROM base AS final
WORKDIR /app
COPY --from=publish /app/publish .
ENTRYPOINT ["dotnet", "ShoppingOnline.API.dll"]
